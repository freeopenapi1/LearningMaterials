1. intro
    1) 객체 상호간 접근을 제어할 수가 있어야 함 
        - A, B 클래스가 가지고 있는 상태와 동작을 
          상호간 접근을 허용 할수도 있어야 되고,
          접근을 막아야 되는 경우도 있기 때문임.

    2)  접근제어(Access Modifier)
        - 객체의 상태 정보는 중요하기 때문에 접근을 못하게 해야 함 (정보은닉)
        - 객체의 행위 정보는 상호작용을 해야 되기 때문에 접근을 허용함 

2. 접근제어 지시자(Access Modifier)          
    1) 변수나 메서드에 접근 제한자를 지정하면 접근을 제한할수 있음
    2) 클래스 외부에서 클래스의 멤버변수, 메서드, 생성자를 사용할수 있는지 여부를 지정 
        - public 
            - 모든 패키지에서 접근 가능 
            - (모든 클래스는 public)
            - (모든 멤버메서드는 public)
        - private 
            - 모든 패키지에서 접근 불가 (자기 자신만 접근 가능)
            - (모든 멤버변수는 private)      

        - protected 
            - 상속관계에서 하위클래스에서 상위클래스 접근 가능 
        - default
            - (단어로 존재하지 않음)                                       
            - 동일한 패키지에서만 접근가능 

3. get() / set() 메서드 
    1) private으로 선언된 멤버 변수(필드)에 대해 접근, 수정할수 있는
       메서드를 public 으로 제공 
    2) get() 메서드만 제공되는 경우 read-only 필드  

4. 정보 은닉 (Information hiding)
    1) OOP에서 정보 은닉은 외부에서 접근 가능한 최소한의 정보를 오픈함 
    2) 객체의 오류를 방지함으로써 클라이언트 객체가 더 효율적으로 활용
       할수 있도록 함.    

5. 캡슐화 (encapsulation)  
    1) 정보 은닉을 활용한 캡슐화 
    2) 대부분의 멤버 변수와 메서드를 감추고
       외부에 통합된 인터페이스만은 제공하여
       일관된 기능을 구현하게 함 
    3) 각각의 메서드나 멤버 변수를 접근함으로써 발생하는 오류를 최소화 함                                