1. if문
    1) 주어진 조건에 따라 다른 실행이 이루어지도록 구현 
    2) if문, switch문 
    3) 문법
        - if문
            - if(조건식) {
                수행문;         //조건식이 '참'인 경우에 수행문이 수행됨
                               //조건식이 '참'이 아닌 경우에 수행문이 수행되지 않음
              }

        - if ~ else문 
            - if(조건식) {
                수행문1;        //조건식이 '참'인 경우에 수행됨
              } 
              else {
                수행문2;        //조건식이 '참'이 아닌 경우에 수행됨
              } 

        - 조건이 여러 개일 때의 if문 
            - if ~ else if ~ else 문 
            - 하나의 상황에 대한 조건식이 여러개로 나뉘고 
              각 조건에 다른 수행이 이루어져야 할 경우 사용. 
            - else if 절은 중간에 얼마든지 추가 가능 
            
            - if(조건식1) {
                수행문1;   //조건식1이 '참'인 경우 수행하고 전체 조건문을 빠져나감                   
              }                          
              else if(조건식2) {
                수행문2;   //조건식2이 '참'인 경우 수행하고 전체 조건문을 빠져나감 
              }  
              else if(조건식3) {
                수행문3;   //조건식3이 '참'인 경우 수행하고 전체 조건문을 빠져나감 
              }   
              else if(조건식4) {
                수행문4;   //조건식4이 '참'인 경우 수행하고 전체 조건문을 빠져나감 
              }  
              else if(조건식5) {
                수행문5;   //조건식5이 '참'인 경우 수행하고 전체 조건문을 빠져나감 
              } 
              else {
                수행문6;   //위 조건이 모두 해당되지 않는 경우 수행됨
              }   

              수행문7;                           

              - 예) 조건식 4가 만족되면 수행문4 -> 수행문7 순으로 수행됨

2. switch~case문 
  1) if ~ else if ~ else문을 사용할 때 복잡하고 번거로운 부분을
     가독성 좋게 구현 
  2) 비교 조건이 특정 값이나 문자열인 경우 사용 
  3) break문을 사용하여 각 조건이 만족되면 switch 블럭을 빠져나오도록 함  
  4) 문법 
    switch(조건식) {
      case 1:
        처리1;
        break;    <== 필요하면 사용
      case 2:
        처리2;
        break;  
        .
        .
        .
      default:
        처리         
    }     

3. java14부터 제공되는 switch 구문 
  1) 쉼표로 조건 구분 
  2) 반환값을 받을수 있음 
  3) yield 키워드 사용             

      