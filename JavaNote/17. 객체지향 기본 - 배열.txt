1. intro
    0) 자료 구조 (Data Structure)
        - 대량 데이터를 효율적으로 관리하는 메커니즘 
        - ex) 우편 번호, 
              인사자원부를 통한 인원 관리 

    1) 하나의 자료형  
        자료형 변수;
            int a;          //정수 한개
            Book b;         //책 한권
            String str;     //문자열 한개

    2) 여러 개의 자료형 
        자료형[] 변수;     
             ---
             배열자료형     

            int[] a;        //정수 여러 개
            Book[] b;       //책 여러 권 
            String[] str;   //문자열 여러 개

    3) 배열(Array)
        - 가장 기본적인 자료구조 
        - 동일한 자료형의 순차적 자료 구조 
        - 1차원 구조의 메모리 공간 
        - 자료를 순차적으로 한꺼번에 관리하는 방법 
        - 순서(index)를 가진 데이터의 집합 
        - 물리적 위치와 논리적 위치가 동일 
            - 전체 원소가 메모리상에 일렬로 저장됨 
        - 배열의 순서는 0부터 시작 
        - 자바에서 객체 배열을 구현한 ArrayList를 많이 활용함

2. 배열 선언과 초기화 
    1) 배열 선언
        - 자료형[] (참조)변수명 = new 자료형[개수];         <---권장
        - 자료형 (참조)변수명[] = new 자료형[개수]; 

3. 배열 사용하기 
    1) [] 인덱스 연산자 활용
        - 배열 요소가 저장된 메모리의 위치를 연산하여 찾아옴 
    2) 배열의 길이와 요소의 개수는 동일하지 않을수도 있음     
    3) 배열의 연산
        - get(int idx) : idx번째 원소 반환 
            - 메모리가 연속적이기 때문에
              arr의 시작 주소로부터 idx만큼 떨어진 원소의 주소를 
              계산하고, 접근함 
        - change(int idx, int val) : idx번째 원소를 val로 변경 
            - [] 연산자를 통해 idx번 원소에 바로 접근하고,
              값을 변경할수 있음  
        - append(int val) :  가장 뒤에 원소 삽입
            - 배열이 꽉 차 있다면? 
                - 한 번 생성된 배열은 고정 길이임
                - 원소들이 연속되어있는 배열의 마지막에 원소를 추가할 때
                  이미 배열이 꽉 차있다면 
                  - 그보다 큰 새 배열을 생성해 옮겨담아야 함  
        - insert(int idx, int val) : 현재 idx번째 원소의 앞에 원소 삽입
            - 원소들이 연속되어있는 배열의 중간에 원소를 추가하기 
                - 추가되는 원소의 뒷 원소들이 모두 한 칸씩 뒤로 이동해
                  새 원소를 삽입할 수 있는 자리들 만들어야 함   
        - remove(int idx) : idx번째 원소 삭제 
            - 원소들이 연속되어있는 배열의 중간 원소를 삭제할때
                - 해당 원소의 뒷 원소들을 모두 한 칸씩 앞으로 이동해야함 



4. 객체 배열 사용하기 
    1) 객체 배열 선언과 구현
        - 기본 자료형 배열은 선언과 동시에 배열의 크기만큼의 메모리가 할당됨 
        - 객체 배열의 경우엔 요소가 되는 객체의 주소가 들어감(4바이트) 
          메모리만 할당됨.    
    2) 객체 배열 복사하기 
        - 얕은 복사 
            - 객체 주소만 복사되어 한쪽 배열의 요소를 수정하면 같이 수정됨 
            - 두 배열이 같은 객체를 가리킴
        - 깊은 복사           
            - 각각의 객체를 생성하여 그 객체의 값을 복사하여 
              배열이 서로 다른 객체를 가리키도록 함.

5. 배열 사용
    1) 메서드의 매개변수로 사용
    2) 메서드의 반환형으로 사용 
    3) main() 메서드의 매개변수 
        - JVM이 프로그램을 실행할 때 호출하는 메서드 
        - 메서드를 호출할때 인수를 넘겨주는 방식이 아님     

6. 2차원 배열 사용 
    1) intro
        - 1차원 배열을 3개 만듦 ==> 2차원 배열을 1개 만듦
        - 영상처리에서 이미지를 처리할 때 주로 사용됨
            - pixel(픽셀)은 화소라고 함
                - 디지털 이미지를 구성하기 위한 최소 단위
    2) 다차원 배열
        - 이차원 이상으로 구현된 배열 
        - 평면(이차원 배열)이나 공간(삼차원 배열)을 활용 
        - 2차원 배열
            - int[][] arr = new int[행][열];
            - 2차원 배열도 연속적인 자료구조 
            - 예) int[][] arr = new arr[2][3];
                ---                  --- --  
                자료형              행개수 열개수      

        - 서로 다른 열을 가진 가변 길이 배열 
            - 예) int[][] arr = new arr[5][];

7. ArrayList 
    1) 객체 배열을 구현한 클래스    
    2) 기존 배열 선언과 사용 방식은
       배열의 길이를 정하고 요소의 개수가 배열의 길이보다 커지면
       배열을 재할당하고 복사해야 했음.
       => 배열의 요소를 추가하거나 삭제하면 
          다른 요소들의 이동에 대한 구현을 해야함 
    3) 객체 배열을 좀더 효율적으로 관리하기 위해 제공해 주는 클래스       
    4) 주요 메서드 
        - boolean add(E e)    
            - 요소 하나를 추가함. E는 요소의 자료형을 의미함.    
        - int size()                     
            - 배열에 추가된 요소 전체 개수를 반환함 
        - E get(int index)
            - 배열의 index 위치에 있는 요소 값을 반환함 
