1. static과 메모리의 관계   ①②③④⑤⑥⑦⑧⑨⑩
    1) 메인(시작) 메서드가 객체생성(new)없이 실행이 됨 
       (StaticTest 동작되는 방식)
        ① JVM이 실행할 클래스(StaticTest.class)를 찾음 
        ② static 키워드가 붙어있는 멤버들은 정해진 메모리(static-zone) 위치에 
            한번 자동으로 로딩함 
            - static 멤버들은 클래스를 사용하는 시점에서 딱 한번 메모리에 로딩됨
            - 여기서 main() 메서드가 static이기 때문에 메모리에 자동으로 로딩됨 
        ③ JVM이 static-zone에 있는 main() 메서드를 호출함 
        ④ 호출된 메서드를 stack area에 push 한 뒤 동작을 시작함  

    2) Call Stack (Frame Area)
        ① 메서드가 호출되면 호출된 기계어코드가 push되고 
            실행되는 메모리공간 
        ② 현재 프로그램이 실행되고 있는 상태를 파악할수 있음 
        ③ LIFO(Last In First Out)구조임
         * PC (program counter) : 현재 수행중인 프로그램 위치 
        ④ stack에 아무것도 없으면 프로그램이 종료됨 

    3) static 멤버는 클래스를 사용하는 시점에서 자동으로 
       static-zone에 로딩됨 
       - new를 이용해서 객체를 생성할 필요가 없음 

    4) static 멤버접근 방법
        - 클래스이름.호출메서드                
      
2. static과 non-static 멤버들의 접근 방법      
    1) Method Area 
        - 메서드의 기계어 코드가 할당되는 메모리공간
        - static과 non-static 멤버들이 따로따로 할당되는 메모리공간 

    2) Heap Area     
        - 객체가 생성(new)되는 메모리 공간

    3) non-static 멤버접근 방법
        - 객체를 생성해서 접근         

3. 스태틱(static)
    1) static 메서드, static 변수는 메서드 영역에 저장되며,
       프로그램 시작 전에 로드되고 프로그램 종료 시 소멸됨 
    2) 코드가 메서드 영역에 다 로딩되면
       그 중에서 static으로 지정된 변수와 메서드는 
       메서드 영역 내 스태틱 존(영역)으로 옮겨짐.

4. static 변수 
    1) 여러 인스턴스에서 공통으로 사용하는 변수가 필요한 경우 
        - 여러 인스턴스가 공유하는 기준 값이 필요한 경우
            - 학생마다 새로운 학번 생성 
            - 카드회사에서 카드 새로 발급할때마다 새로운 카드 번호를 부여 
            - 회사에 사원이 입사할때 마다 새로운 사번이 필요한 경우 
    
    2) 어떤 객체에서도 접근해서 사용할수 있음                   
        - 전역(Global) 변수
        - 클래스 변수, 정적 변수
        - 인스턴스 생성과 상관없이 사용 가능하므로 클래스이름으로 직접 참조가능(권장)

    3) static 변수는 프로그램이 메모리에 있는 동안
       계속 그 영역을 차지하므로 너무 큰 메모리를 할당하는 것은 지양해야 함.

    4) 멤버 변수가 너무 많으면 인스턴스 생성시 쓸데없이 메모리가 할당됨   
        - 상황에 적절하게 변수를 사용해야 함      

5. 프로그램에서 변수의 유형

    변수 유형           선언위치           사용범위(scope)              생성과 소멸                         메모리
    ====================================================================================================================
    지역변수            메서드 내부         메서드 내부에서만         메서드가 호출될때 생성되고               stack 
    (로컬변수)                                                      메서드가 끝나면 소멸함  
    --------------------------------------------------------------------------------------------------------------------
    멤버변수            클래스 내부         클래스 내부에서 사용,       인스턴스가 생성될 때 힙에 할당되고,     heap                    
    (인스턴스변수)                          private 아니면 참조변수로   가비지 컬렉터(GC)가 메모리 수거할때
                                           다른 클래스에서 사용가능     소멸됨 
    ---------------------------------------------------------------------------------------------------------------------                                           
    static 변수         클래스 내부        클래스 내부에서 사용,           프로그램이 처음 시작할 때 상수와 함께  method area    
    (클래스 변수)                          private 아니면 클래스이름으로   메서드 영역에 생성되고, 
                                          다른 클래스에서 사용가능         프로그램이 끝나고 메모리를 해제할 때  
                                                                         소멸됨 


6. 디자인 패턴 
    1) GoF 네명의 학자가 패턴 제안
        - 기존의 많은 사례와 시스템 분석하여 좋은 설계 제안
    2) 객체지향 프로그래밍 
        - 추상화, 캡슐화, 상속, 다형성
    3) SOLID 원칙      
    4) 23개 디자인 패턴들     

7. static 응용 (Singleton pattern)
    1) 싱글톤 패턴 
        - 프로그램에서 인스턴스가 단 한 개만 생성되어야 하는 경우 사용하는 
          디자인 패턴.
        - static 변수, static 메서드 활용하여 구현
    
    2) 싱글톤 패턴 적용하기 
        - 생성자는 private으로 선언 
        - 클래스 내부에 유일한 private 인스턴스 생성
        - 외부에서 유일한 인스턴스를 참조할수 있는 public 메서드 제공   