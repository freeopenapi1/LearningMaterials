1. OOP (Object Oriented Programming)
    1) 객체 (Object)
        - 구체적 데이터의 단위(물리적인 객체)
            - 개, 고양이, 호랑이, 학생, 회원, 소나타,...
        - 추상적 데이터의 단위(개념적인 객체)            
            - 동물, 주문, 배송, 자동차,...

    2) 절차 지향 프로그래밍 & 객체 지향 프로그래밍 
        - 절차 지향 프로그래밍
            - 시간이나 사건의 흐름에 따른 프로그래밍 
                - 일어난다 -> 씻는다 -> 밥을 먹는다 -> 버스를 탄다 ->
                  요금을 지불한다 -> 학원 도착한다

        - 객체 지향 프로그래밍 
                             먹는다
              학생    <-------------------> 밥
                |
            탄다 |          간다
                |
              버스                         학원 

            - 객체를 정의(클래스로 구현)  
            - 각 객체 제공하는 기능들을 구현하고
            - 각 객체가 제공하는 기능들 간의 메시지 전달을 통하여
              객체간의 협력을 구현               
    3) 객체 예
        - 온라인 쇼핑몰에 회원 로그인을 하고 여러 판매자가 판매하고 있는
          제품 중 하나를 골라 주문을 한다  
        - 아침에 학원에 가는 길에 별다방에 들려 아아를 주문한다.    
        - 성적확인을 위해 학사 관리 시스템에 로그인하여 수강 한 과목들의
          성적을 확인한다              

2. 클래스 
    1) 객체와 관련된 데이터와 처리 동작을 한데 모아 코드 뭉치임.
    2) 어느 정도 특징적인 데이터와 동작으로 추려낼 필요가 있음.
    3) 추려내는 과정을 추상화(Abstraction), 일반화라고 부름.

        탈거    이륜        자전거, 오토바이    Bike  
                자동차      승용차, 버스, 트럭  Car      
                운송수단    자동차, 배, 비행기  Vehicle   
    4) 명사적인 특징을 뽑아내는 추상화 과정 => 멤버 변수(필드) 추출 
       동사적인 특징을 뽑아내는 추상화 과정 => 멤버 함수(메서드) 추출      
    5) 클래스는 객체의 청사진(Blueprint)이다.     

3. 객체와 클래스 
    1) 클래스는 객체를 프로그래밍에서 사용하려고 추상화해서 기술해놓은 설계도임.  
    2) 프로그래밍에서 사용하려면 설계도(클래스)를 기초로 해서 
       실체(객체)를 만들 필요가 있음.       
       - 실체화된 것을 객체(인스턴스)라고 함 
       - 실체화하는 작업을 객체(인스턴스)를 생성한다고 함(instance)
    3) 클래스는 설계도대로 구현한 것을 메모리에 탑재해 메모리 주소를 
       부여한 것이 객체임. 
    4) 실제로 클래스를 객체로 만드는 코드는 아래와 같음

        클래스 타입 (참조)변수  객체생성
        --------- ---------   ----
        FieldInit fieldInit = new FieldInit(); 
                                  -----------
                                   생성자             

4. 메서드(method) 
    1) 객체가 가지고 있는 동작(기능)을 메서드(함수)라고 함     
    2) 반복적인 동일 작업을 메서드를 만들어 사용하면 편리함 
    3) 객체지향프로그램은 객체가 가지고 있는 메서드를 통해서 
       데이터를 서로 주고 받으며 상호작용을 함
    4) 메서드는 크게 API에서 제공해주는 메서드와 
       사용자 정의 메서드의 두 종류로 분류할수 있음         
    5) 메서드는 정의를 하고 호출을 하여 사용되어 짐.    
    6) 프로그래밍 언어(java)의 메서드 

        - 메서드 정의 하기 

                결과 함수이름  입력값(인수,인자,매개변수,파라미터)
                --- --- -------------      
            public int add(int x, int y) {        <== 정의부(Head), 원형(prototype)
                    <== 구현부(Body)
            }   


                    void : 아무 결과도 반환하지 않으면 자료형에 void를 씀   
                    --------      
            접근제한자 리턴타입 메서드명(인수1, 인수2,...) {
                수행코드;

                return 반환값;
            }


        - 메서드 호출(Call) 하기 

            public static void main(String[] args) {
                int a=5;
                int b=3;
                int result = add(a,b);      //메서드 호출 -- 실인수
            }

    7) 함수 호출과 스택 메모리 
        - 스택 : 함수가 호출될 때 지역 변수들이 사용하는 메모리 
        - 함수의 수행이 끝나면 자동으로 반환되는 메모리 