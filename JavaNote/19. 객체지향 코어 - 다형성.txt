1. 다형성 (polymorphism)
    1) 하나의 코드가 여러 자료형으로 구현되어 실행되는 것 
    2) 같은 코드에서 여러 실행 결과가 나옴 
    3) 정보은닉, 상속과 더불어 OOP의 가장 큰 특징 중 하나
    4) 다형성을 잘 활용하면 유연하고 확장성 있고, 유지보수가 
       편리한 프로그램을 만들수 있음.
    5) 다형성 이론을 위한 전재조건        
        - 상속관계
        - Override (재정의)
        - UpCasting (업케스팅)
        - 동적 바인딩 

2. 다형성을 사용하는 이유
    1) 상속과 메서드 재정의를 활용하여 확장성 있는 프로그램을 만들수 있음 
    2) 상위 클래스에서는 공통적인 부분을 제공하고 하위 클래스에서는 
       각 클래스에 맞는 기능 구현 
    3) 여러 클래스를 하나의 타입(상위 클래스)으로 핸들링 할 수 있음    

3. 다형성을 활용 (멤버십 프로그램 확장)    
    1) 일반고객과 VIP 고객의 중간 멤버십 만들기
        - Gold 고객 등급
            - 제품 살때 10 % 할인
            - 보너스 포인트 2% 적립 

4. 클래스간의 관계 case 
    1) IS-A 관계 (inheritance)
        - 일반적인(general) 개념과 구체적인(specific) 개념과의 관계 
        - 상속은 클래스간의 결합도가 높은 설계 
            - 상위 클래스의 수정이 많은 하위 클래스에 영향을 미칠수 있음 
        - 계층구조가 복잡하거나 hierachy가 높으면 좋지 않음 
    2) HAS-A 관계 (composition)
        - 클래스가 다른 클래스를 포함하는 관계 (변수로 선언)
        - 코드 재사용의 가장 일반적인 방법 
        - 상속하지 않음    

5. 다형성으로 형변환 (캐스팅)
    1) 형변환의 전제 조건 -- 상속 관계에 있는 것만 객체타입 변환이 가능
    2) UpCasting
        - 자손타입에서 조상타입으로 형변환, 형변환 생략가능. 묵시적 
            => 조작 멤버변수가 줄어듦
    3) Downcasting
        - 업캐스팅된 클래스를 다시 원래의 타입으로 형변환 
            - 하위 클래스로의 형 변환은 명시적 해야함.

            - Customer customer = new VIPCustomer();           //묵시적 
              VIPCustomer vcustomer = (VIPCustomer)customer;   //명시적 

            - instanceof 연산자 
                - 인스턴스의 형(Type) 체크 
                - 원래 인스턴스의 형이 맞는지 여부 체크하는 키워드 
                    - 맞으면 true, 아니면 false를 반환함                  

