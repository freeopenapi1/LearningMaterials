1. 프로그램에서의 오류 
    1) 컴파일 오류(compile error)
        - 프로그램 코드 작성 중 발생하는 문법적 오류 
        - IDE에서 대부분의 컴파일 오류는 detection 해줌 

    2) 실행 오류 (runtime error)
        - 실행 중인 프로그램이 의도하지 않는 동작(bug)을 하거나
          프로그램이 중지 되는 오류 
        - 비정상 종료가 되는 경우 시스템의 심각한 장애를 발생할수 있음     

2. 예외 처리의 중요성 
    1) 프로그램이 비정상 종료를 피하여 시스템이 원할하게 실행되도록 함
    2) 오류가 발생한 log를 남겨서 추후 log 분석을 통해 
       그 원인을 파악하여 bug를 수정하는 것이 중요     

3. 오류와 예외처리 클래스 
    1) 시스템 오류(error)
        - 가상 머신에서 발생된 에러, 동적 메모리가 없는 경우, 
          스택 메모리 오버플로우 등                            
    2) 예외(Exception)
        - 프로그램에서 제어할 수 있는 오류 
            - 예) 읽어들여야 할 파일이 존재하지 않을때,
                  DB연결, 네트웍 연결이 안되는 경우

4. 예외 클래스들 
    1) Exception
        - 모든 예외 클래스의 최상위 클래스 
    2) 다양한 예외들에 대해 그 처리를 위한 클래스가 제공되고 있음 
        - IOException (입출력 예외처리)
            - FileNotFoundException
            - SocketException
        - RuntimeException (실행 오류 예외처리)
            - ArithmeticException
            - IndexOutOfBoundsException     
            - NullPointerException          

5. 예외 처리 & 미루기     
    1) try ~ catch 문 
        
        try {
            예외가 발생할 수 있는 코드
            ....
            ....                 
        } catch(처리할 예외 타입 e) {
            try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
        }  

    2) try ~ catch ~ finally 문 

        - finally 블럭에서 파일을 닫거나 네트웍을 닫는 등의 리소스 
          해제 구현을 함 
        - try {} 블럭이 수행되는 경우, finally{} 블록은 항상 수행 됨 
        - 여러 개의 리소스를 각각 해제하지 않고  finally 블록에서 해제하도록 구현함 

    3) try with resources 문       

        - 리소스를 사용하는 경우 close() 하지 않아도 자동으로 해제 되도록 함 
            - close() 명시적으로 호출하지 않아도, try() 블록에서 열린 리소스는 
              정상적인 경우나 예외가 발생한 경우 모두 자동으로 해제됨 

        - 리소스를 try() 내부에서 선언해야 함 

        - 해당 리소스 클래스가 AutoClosable 인터페이스를 구현 해야 함 

    4) 예외 처리 미루기 
        - 호출하는 부분에서 처리하는 방법
        - throws를 이용하면 예외가 발생할 수 있는 부분을 사용하는 문장에서 
          예외를 처리할 수 있음 

    5) 하나의 try() 블록에서 예외가 여러 개 발생하는 경우 
        - 각각의 예외를 따로 처리할 수도 있음
        - 예외를 묶어서 하나의 방법으로 처리할 수도 있음 
        - Exception 클래스를 활용하여 default 처리할 때 
          Exception 블록은 맨 마지막에 위치해야 함 

6. 사용자 정의 예외 클래스 
    1) 자바에서 제공되는 예외 클래스 외에 프로그래머가 직접 만들어야 하는 예외가 
       있을 수 있음.
    2) 기존 예외 클래스중 가장 유사한 예외 클래스에서 상속받아 
       사용자 정의 예외를 만들면 됨 
    3) 기본적으로 Exception 클래스를 상속해서 만들 수 있음.

    4) 예) 패스워드에 대한 예외 처리 클래스 
        - 패스워드 입력할 때 아래와 같은 오류처리 함
            - 비밀번호는 null일수 없음
            - 비밀번호의 길이는 5이상 임
            - 비밀번호는 문자로만 이루어져서는 안됨 (하나이상의 숫자나 특수문자 포함)                                          