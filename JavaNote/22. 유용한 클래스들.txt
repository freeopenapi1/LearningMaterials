1. Object 클래스 
    1) 모든 클래스의 최상위 클래스 
        - 모든 클래스는 Object 클래스를 상속 받음
            - 컴파일러가 extends Object를 추가함 
    2) 클래스를 한 개 만들때 기본적으로 생략된 코드 (3가지)
        - default package
        - 최상위 클래스 
        - default 생성자 

    3) java.lang 패키지 
        - 프로그래밍 import 하지 않아도 자동으로 import됨 
        - 많이 사용하는 기본 클래스들이 속한 패키지 
        - Object, String, System, ....        

    4) String toString() 메서드 
        - 객체의 정보를 String으로 바꾸어서 사용할 때 쓰임 
        - String, Integer 등 클래스는 이미 재정의 되어 있음
        - 많은 클래스에서 재정의해서 사용 

    5) int hashCode() 메서드 
        - 인스턴스의 저장 주소를 반환함     
        - 힙메모리에 인스턴스가 저장되는 방식 hash 방식  
            - index = hash(key) 
            - 자료의 특정 값(키값)에 대한 저장 위치를 반환해주는 해시 함수임 

    6) boolean equals(Object obj)   
        - 두 인스턴스의 주소 값을 비교하여 true/false 반환
        - 재정의하여 두 인스턴스가 논리적으로 동일함의 여부 구현함 
        - 인스턴스가 다르더라도 논리적으로 동일한 경우 true를 반환하도록
          재정의 할수 있음    

    => 두 인스턴스가 같다
        - 두 인스턴스에 대한 equals()의 반환값이 true 
        - 동일한 hashCode() 값을 반환  

    7) protected Object clone()                      
        - 객체의 원본을 복제하는데 사용하는 메서드 
        - 객체의 정보(멤버 변수값..)가 동일한 또다른 인스턴스가 생성되는 것임.
            - 정보 은닉, 객체 보호 관점에서는 위배 
        - 해당 클래스의 clone() 메서드의 사용을 허용한다는 의미로 
          cloneable 인터페이스 명시해 줌.           

2. String 클래스 
    1) String 선언하기 
        - 힙 메모리에 인스턴스로 생성되는 경우 (new 연산자) /
          상수 풀(constant pool)이 있는 주소를 참조하는 두가지 방법.
        - 힙 메모리에 생성될 때마다 다른 주소값을 가짐 (new 연산자) / 
          상수 풀의 문자열은 모두 같은 주소값을 가짐         

    2) 한번 생성된 String은 불변(immutablde)
        - String을 연결하면 기존의 String에 연결되는 것이 아니고
          새로운 문자열이 생성됨 (메모리 낭비가 발생할수도 있음)    

3. StringBuilder, StringBuffer
    1) 내부적으로 가변적인 char[]를 멤버 변수로 가짐 
    2) 문자열을 여러번 연결하거나 변경할 때 사용하면 유용함 
    3) 새로운 인스턴스를 생성하지 않고 char[]를 변경함
    4) StringBuffer는 멀티스레드 프로그램에서 동기화(synchronization)를 보장
    5) 단일 스레드 프로그램에서는 StringBuilder 사용을 권장 

4. Text Block (java 13)
    1) 문자열 """ """ 사이에 이어서 만들수 있음
    2) html, json 문자열을 만드는데 유용하게 사용할 수 있음    

5. Class 클래스 
    1) 자바의 모든 클래스와 인터페이스는 컴파일 후 class 파일이 생성됨 
    2) Class 클래스
        - 컴파일 된 class 파일을 로드하여 객체를 동적 로드하고,
          정보를 가져오는 메서드가 제공됨.
          - class 파일에는 객체의 정보가 포함되어 있음 (멤버변수, 메서드, 생성자 등)    

    3) 클래스 정보
        - reflection 프로그래밍
            - Class 클래스를 사용하여 클래스의 정보(멤버변수, 메서드, 생성자)등을 
              알수 있고, 인스턴스를 생성하고, 메서드를 호출하는 방식의 프로그래밍.
        - 로컬 메모리에 객체 없는 경우
            - 원격 프로그래밍, 객체의 타입을 알수 없는 경우에 경우 
        - java.lang.reflect 패키지에 있는 클래스를 활용하여 프로그래밍          