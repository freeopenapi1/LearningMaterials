0. intro
    1) 객체를 수평적인 구조로 설계 
        - 객체를 설계하다 보면 비슷한 클래스의 경우 중복적인 요소가 발생함  
        - 코드의 중복 발생
        - 새로운 요구사항 발생시 반영이 어려움 (유지보수가 어려움)
        - 확장성 떨어짐
    2) 객체를 수직적인 구조로 설계 
        - 코드의 중복부분 최소화 
        - 확장(상속) 시킴
        - 수직적 구조 = 계층화 = 상속(Inheritance)
        - is a 관계
        - is a kind of 관계  
        - 새로운 요구사항 발생시 반영이 쉬움 (유지보수가 쉬움)    
        - 확장성이 좋음  

1. 클래스 상속
    1) 새로운 클래스를 정의할 때 이미 구현된 클래스를 상속(Inheritance) 받아서
       속성이나 기능을 확장하여 클래스를 구현됨 
    2) 이미 구현된 클래스보다 더 구체적인 기능을 가진 클래스를 구현해야 할때
       기존 클래스를 상속함 

2.  1) A클래스가 B클래스에게 상속한다.
        = B클래스가 A클래스를 상속받는다.

    2) 상속하는 클래스 
        - 상위 클래스, parent class, base class, super class

       상속받는 클래스 
        - 하위 클래스, child  class, derived class, sub class 

3. 상속의 문법
    1) extends 키워드 뒤에는 단 하나의 클래스만 올수 있음 
        - 자바 단일 상속 (single inheritance)만을 지원.
    2) class A extends B {

       }                        
    3) is a 관계 : ~은 ~이다. (자손클래스는 조상클래스이다)
        - 직접적 관계 
        - 만들어질 클래스에 영향을 가장 많이 주는 클래스는 상속함.

4. 상속을 구현하는 경우 
    1) 상위 클래스는 하위 클래스보다 더 일반적인 개념과 기능을 가짐
        - 일반화
        - 추상화 
        - 개념화 
        - 포괄적 
    2) 하위 클래스는 상위 클래스보다 더 구체적인 개념과 기능을 가짐 
        - 구체화
        - 세분화 
    3) 하위 클래스는 상위 클래스의 속성과 기능을 확장(extends)한다는 의미임   
    4) 상속을 사용하면 하위클래스가 상위클래스를 재활용 가능함 
        - 하위클래스가 상위클래스를 접근하여 사용 가능    

5. protected 예약어 
    1) 외부클래스에는 private으로 선언된 속성은 접근 불허됨 
    2) 상위클래스에 protected로 선언된 변수나 메서드는 
       다른 외부 클래스에서는 사용 불가하지만
       상속을 받은 하위 클래스에서는 사용 가능.    
    3) 상속관계에서 하위클래스가 상위클래스의 접근을 허용하는 접근권한 키워드 

6. 포함 관계(composite)
    1) has a 관계 : ~은 ~를 가지고 있다.
        - 보조적인 것은 포함관계로 정의 
    2) 다중 상속을 대체하는 방법 
    3) 클래스의 멤버변수 다른 클래스를 선언하는 것
    4) 규모가 적은 클래스를 먼저 만들고, 이것을 조합하여 
       규모가 큰 클래스를 만들어감       

7. Object 클래스
    1) 모든 클래스의 조상 
    2) 사용자 정의 클래스는 아무것도 상속을 받지 않더라도 
       자동으로 Object를 상속 받음                          