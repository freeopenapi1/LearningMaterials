0. intro
    1) 객체를 수평적인 구조로 설계 
        - 객체를 설계하다 보면 비슷한 클래스의 경우 중복적인 요소가 발생함  
        - 코드의 중복 발생
        - 새로운 요구사항 발생시 반영이 어려움 (유지보수가 어려움)
        - 확장성 떨어짐
    2) 객체를 수직적인 구조로 설계 
        - 코드의 중복부분 최소화 
        - 확장(상속) 시킴
        - 수직적 구조 = 계층화 = 상속(Inheritance)
        - is a 관계
        - is a kind of 관계  
        - 새로운 요구사항 발생시 반영이 쉬움 (유지보수가 쉬움)    
        - 확장성이 좋음  

1. 클래스 상속
    1) 새로운 클래스를 정의할 때 이미 구현된 클래스를 상속(Inheritance) 받아서
       속성이나 기능을 확장하여 클래스를 구현됨 
    2) 이미 구현된 클래스보다 더 구체적인 기능을 가진 클래스를 구현해야 할때
       기존 클래스를 상속함 

2.  1) A클래스가 B클래스에게 상속한다.
        = B클래스가 A클래스를 상속받는다.

    2) 상속하는 클래스 
        - 상위 클래스, parent class, base class, super class

       상속받는 클래스 
        - 하위 클래스, child  class, derived class, sub class 

3. 상속의 문법
    1) extends 키워드 뒤에는 단 하나의 클래스만 올수 있음 
        - 자바 단일 상속 (single inheritance)만을 지원.
    2) class A extends B {

       }                        
    3) is a 관계 : ~은 ~이다. (자손클래스는 조상클래스이다)
        - 직접적 관계 
        - 만들어질 클래스에 영향을 가장 많이 주는 클래스는 상속함.

4. 상속을 구현하는 경우 
    1) 상위 클래스는 하위 클래스보다 더 일반적인 개념과 기능을 가짐
        - 일반화
        - 추상화 
        - 개념화 
        - 포괄적 
    2) 하위 클래스는 상위 클래스보다 더 구체적인 개념과 기능을 가짐 
        - 구체화
        - 세분화 
    3) 하위 클래스는 상위 클래스의 속성과 기능을 확장(extends)한다는 의미임   
    4) 상속을 사용하면 하위클래스가 상위클래스를 재활용 가능함 
        - 하위클래스가 상위클래스를 접근하여 사용 가능    

5. protected 예약어 
    1) 외부클래스에는 private으로 선언된 속성은 접근 불허됨 
    2) 상위클래스에 protected로 선언된 변수나 메서드는 
       다른 외부 클래스에서는 사용 불가하지만
       상속을 받은 하위 클래스에서는 사용 가능.    
    3) 상속관계에서 하위클래스가 상위클래스의 접근을 허용하는 접근권한 키워드 

6. 포함 관계(composite)
    1) has a 관계 : ~은 ~를 가지고 있다.
        - 보조적인 것은 포함관계로 정의 
    2) 다중 상속을 대체하는 방법 
    3) 클래스의 멤버변수 다른 클래스를 선언하는 것
    4) 규모가 적은 클래스를 먼저 만들고, 이것을 조합하여 
       규모가 큰 클래스를 만들어감       

7. Object 클래스
    1) 모든 클래스의 조상 
    2) 사용자 정의 클래스는 아무것도 상속을 받지 않더라도 
       자동으로 Object를 상속 받음                          

8. 상속에서 하위 클래스가 생성되는 과정 
    1) 하위 클래스를 생성하면 상위 클래스가 먼저 생성 됨 
    2) new VIPCustomer()를 호출하면 Customer()가 먼저 호출됨 
    3) 클래스가 상속 받은 경우 하위 클래스의 생성자에서는 
       반드시 상위 클래스의 생성자를 호출 함          

9. super 키워드
    1) 하위 클래스에서 가지는 상위 클래스에 대한 참조 값
    2) super()
        - 상위 클래스의 기본 생성자를 호출하는 메서드 
        - 하위 클래스에서 명시적으로 상위 클래스의 생성자를 호출하지 않으면
          super()가 호출 됨 
            - 이때 반드시 상위 클래스의 기본 생성자가 존재 해야 됨 
        - 상위 클래스의 기본 생성자를 호출하는 super()는 생략되어 있음.            
    3) 상위 클래스의 기본 생성자가 없는 경우
        - 하위 클래스에서의 생성자에서는 super를 이용해여
          명시적으로 상위 클래스의 생성자를 호출 함 
    4) super는 생성된 상위 클래스 인스턴스의 참조 값을 가지므로
       super를 이용하여 상위 클래스의 메서드나 멤버 변수에 접근 할수 있음.
    5) 상속체이닝 
        - 나보다 부모가 먼저
        - 맨 위 부모클래스부터 객체가 생성되어 자식까지 연결되는 구조        

10. 형 변환 (업캐스팅)                                         
    1) 상위 클래스로 변수를 선언하고 하위 클래스의 생성자로 인스턴스 생성 
        - 부모가 자식을 가리키는 객체생성 방법 
        Customer customerLe = new VIPCustomer();
    2) 상위 클래스 타입의 변수에 하위 클래스 변수가 대입 

11. 상위클래스로의 묵시적 형 변환 (UpCasting)
    1)
        선언된 클래스형(Type) : 상위 클래스형 
        --------
        Customer customerSi = new VIPCustomer(2023, "사이먼 페그");  
                                  --------------------------------
                                  생성된 인스턴스의 생성자 : 하위 클래스 생성자
    2) 상위 클래스 형(type)으로 변수를 선언하고 
       하위 클래스 인스턴스를 생성할수 있음.
    3) 하위 클래스는 상위 클래스의 타입을 내포하고 있으므로 
       상위 클래스로 묵시적 형변환이 가능함.
    4) 상속관계에서 모든 하위 클래스는 상위클래스로 묵시적 형변환이 됨. 
       그 역은 성립하지 않음  
    5) VIPCustomer() 생성자의 호출로 인스턴스는 생성되었지만 
       타입이 Customer이므로 접근할 수 있는 변수나 메서드는 Customer의 변수와 메서드임.                                                  

12. 객체 형 변환 (Object Casting)
    1) 부모와 자식 간에 형변환이 됨 
        - 부모는 여러 명의 자식을 가리킬수 있음.
        - 부모를 알면 자식들을 관리하기 쉬움.
    2) UpCasting
        - 업캐스팅, 자동형변환 
        - 부모 p = new 자식A();
          부모 p = new 자식B(); 
          부모 p = new 자식C(); 
    3) Downcasting
        - 다운캐스팅, 강제형변환 
        - 상위클래스의 타입을 하위클래스의 타입으로 바꾸는 행위             
        - 자식A c = (자식A)부모객체 
          자식B c = (자식B)부모객체 
          자식C c = (자식C)부모객체 


13. 메서드 overriding (재정의)
    1) 하위 클래스에서 메서드 재정의 함 
    2) 상위 클래스에서 정의된 메서드의 구현 내용이
       하위 클래스에서 구현할 내용과 맞지 않는 경우 
       하위 클래스에서 동일한 이름의 메서드를 재정의 할 수 있음.
    3) 조상 클래스에서 상속받은 메서드를 자손한데 맞게끔 구현부를 수정하는 것.
    4) 반드시 메서드 선언부는 동일해야 함(리턴타입, 메서드명, 매개변수)
    5) 상속관계에서 하위클래스가 상위클래스의 동작을 재정의 하는 행위 
    6) modify, change 개념 
        - 기능추가, 변경

    vs 오버로딩 (overloading)
        - 매개변수의 개수, 타입, 순서가 다른 경우임.
        - 매개변수의 리턴타입과 이름은 영향을 주지 않음.
        - 새로운 메서드를 만드는 것 (new 개념)  

14. 애노테이션 (annotation)       
    1) 애노테이션은 원래 주석이라는 의미 
    2) 컴파일러에게 특별한 정보를 제공해주는 역할 
    3) @Override
        - 재정의된 메서드라는 정보 제공 
        - 선언부가 기존의 메서드와 다른 경우 에러가 남 