1. 프로그래밍 방법론 
    1) 절차식 프로그래밍
        - 순차적인 명령을 수행하고 간단한 분기만 가능 
    2) 구조적 프로그래밍
        - 특정 변수를 묶어 구조화하고 이를 통해 프로그래밍 효율 높임
    3) 객체지향 프로그래밍
        - 객체를 기반으로 프로그래밍 되며 클래스, 속성, 기능들의 
          현실 세계 모델을 반영함.
    4) 함수형 프로그래밍 
        - 객체의 형태를 벗어나 함수형을 확장해 함수를 변수처럼 사용 가능     

2. 명령형 프로그래밍 vs 선언형 프로그래밍     
    1) Imperative Programming
        - OOP 객체 지향 프로그래밍 
        - 어떻게 하여야 하는가? (How)

    2) Declarative Programming  
        - Functional Programming 
        - 무엇을 하여야 하는가? (What)        

3. First-Class Citizen(1급 시민) 조건 
    1) 함수/메세드가 매개변수(parameter)로서 전달할 수 있는가? 
    2) 함수/메세드가 반환값(return)이 될 수 있는가?  
    3) 변수에 담을 수 있는가?    

4. 함수형 프로그래밍(Functional Programming, FP)과 람다식(Lambda expression)                
    1) 자바는 객체 지향 프로그래밍 
        - 기능을 수행하기 위해서 객체를 만들고 
          그 객체 내부에 멤버 변수를 선언하고 기능을 수행하는 
          메서드 구현
    2) 자바 8부터 함수형 프로그래밍 방식 지원함
       => 이를 람다식이라 함 
    3) 함수의 구현과 호출만으로 프로그래밍이 수행하는 방식     
    4) 함수형 프로그래밍은 순수 함수를 구현하고 호출함
       => side effect를 주지 않도록 구현하는 방식
       - 순수 함수(pure fuction) : 매개변수만을 사용하여 만드는 함수 
            - 함수 내부에서 함수 외부에 있는 변수를 사용하지 않음 
    5) 여러 자료가 동시에 수행되는 병렬처리가 가능함.                     