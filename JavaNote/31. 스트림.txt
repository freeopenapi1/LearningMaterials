1. 스트림 (Stream)
    1) data의 흐름 
    2) 컬렉션(Collection) 형태로 구성된 데이터를 
       람다를 이용해 간결하고 직관적으로 프로세스하게 해줌
        - 배열, 컬렉션을 대상으로 연산을 수행 
        - 일관성 있는 연산으로 자료의 처리를 쉽고 간단하게 함
    3) for, while 등을 이용하던 기존 loop을 대체 
    4) 손쉽게 병렬 처리를 할 수 있게 해줌 

2. 스트림 특징
    1) 한 번 생성하고 사용한 스트림은 재사용 할수 없음
        - 자료에 대한 스트림을 생성하여 연산을 수행하면 스트림은 소모됨 
        - 다른 연산을 수행하기 위해서는 스트림을 다시 생성해야 함 
    2) 스트림 연산은 기존 자료를 변경하지 않음
        - 자료에 대한 스트림을 생성하면 스트림이 사용하는 메모리 공간은
          별도로 생성되므로 
          연산이 수행되어도 기존 자료에 대한 변경은 발생하지 않음 
    3) 스트림 연산은 중간 연산과 최종 연산으로 구분 됨 
        - 스트림에 대한 중간 연산은 여러 개가 적용 될 수 있음
        - 최종 연산은 마지막에 한 번만 적용됨 
        - 최종 연산이 호출되어야 중간 연산에 대한 수행이 이루어지고
          그 결과가 만들어짐 
          - 지연 연산 
          - 중간 연산에 대한 결과를 연산 중에 알수 없음       

3. Stream API
    1) 중간 연산
        - 중간연산은 스트림을 처리하고 다른 스트림을 반환
        - filter(), map(), sorted() 등 
            - filter()
                - 만족하는 데이터만 걸러내는 데 사용
            - map()
                - 데이터를 변형하는데 사용
                - 데이터에 해당 함수가 적용된 결과물을 제공하는 스트림을 리턴
            - sorted()
                - 데이터가 순서대로 정렬된 스트림을 리턴   

    2) 최종 연산
        - 스트림을 처리하고 최종결과를 반환함  
        - forEach(), count(), max(), min(), reduce()    

    3) 스트림 생성 
        - stream()
            - 컬렉션, 배열, 파일 등의 데이터 소스를 스트림으로 변환  

    4) 스트림 합치기 
        - reduce(), collect()
            - 두 개 이상의 스트림을 합쳐서 처리하는 연산                                                              

