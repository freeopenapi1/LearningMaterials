1. 단일 책임의 원칙 (SRP : Single Responsibility Priciple)
    1) 객체는 하나의 책임만을 맡아야 함
        - 예) Calc 클래스 (사칙계산 기능)
                - 오로지 사칙연산 연산을 위한 기능만 담당해야 함
    2) 책임을 분명히 하여 다른 책임의 변경으로부터 자유로워짐 
    3) 복잡도를 줄이므로 발생할 버그에 대처할 수 있음 
    4) 응집도는 높게, 겹합도는 낮게 설계하는 것     

2. 개방 폐쇄의 원칙 (OCP : Open-Closed Priciple)          
    1) 모듈은 확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 함 
    2) 예
        - Cat 클래스에서 사냥 기능 구현하는 경우 
            - 모든 고양이는 사냥이라는 기본 기능은 변경할 필요가 없음(Close)
                - 인터페이스
            - 특정 하위 클래스에서 HouseCat과 WildCat이라는 클래스의 
              hunt()를 각각의 사냥동작을 재정의할수 있음 (Open)  

3. 리스코프 대체의 원칙 (LSP : Liskov Substitution Priciple) 
    1) 기반 클래스는 파생 클래스로 대체 가능해야 함
    2) 자식 클래스는 언제나 자신의 부모 클래스를 대체할 수 있다는 원칙 
    3) 즉, 부모 클래스가 들어갈 자리에 자식 클래스를 넣어도 잘 작동해야 함
    4) 자식 클래스는 부모 클래스의 책임을 무시하거나(재정의하지 않거나)
       확장 수행함      

4. 인터페이스 분리의 원칙 (ISP : Interface Segregation Priciple)
    1) 클라이언트에 특화된 여러 개의 인터페이스가 하나의 범용 인터페이스보다 나음.
    2) 한 클래스는 자신이 사용하지않는 인터페이스는 구현하지 말아야 함.
    3) 예
        - 스마트폰, 피처폰을 설계하기 위해 하나의 범용 인터페이스로부터 
          설계하는 것보다 전화를 위한 Call, 사진찍는 Camera, 
          문자전송 Sms 인터페이스 등을 따라 분리하는 것
    4) 의존성을 약화시켜 수정 등 용이하게 함            

5. 의존관계 역전의 법칙 (DIP : Dependency Inversion Priciple)
    1) 구체화된 클래스가 아닌 인터페이스나 추상클래스에 의존해야 함 
    2) 인터페이스나 추상 클래스와 관계를 맺음으로
       변화하기 쉬운 것(일반 클래스)으로부터 의존을 줄임.
    3) 변화가 거의 없는 것에 의존함
        - 추상클래스
        - 인터페이스    

6. 객체지향 설계 5대 원칙(SOLID) 요약
    1) SRP   
        - 객체는 하나의 책임만을 맡아야 함
    2) OCP 
        - 모듈은 확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 함 
    3) LSP 
        - 기반 클래스는 파생 클래스로 대체 가능해야 함 
    4) ISP 
        - 클라이언트에 특화된 여러 개의 인터페이스가 하나의 범용 인터페이스보다 나음
    5) DIP 
        - 클라이언트는 구체 클래스가 아닌 인터페이스나 추상 클래스에 의존해야 함                                      