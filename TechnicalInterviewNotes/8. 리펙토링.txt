1. 코드 스멜
    1) 프로그램 가독성이 나쁘고 중복된 로직을 포함하는 등
       코드품질을 저하시키는 요인들의 총칭 
    2) 예
        - 너무 긴 메서드 
        - 방대한 클래스 
        - if, switch문 조건분기가 너무 반복적으로 많음 
        - 과다한 매개 변수
        - 기본 타입에 집착 
            -> 객체화 하지 않고, 기본 타입만 사용함 
        - 하는 일이 없는 클래스 
        - 상속하지 않으면서 만들어놓은 상위 클래스 
        - 메서드 호출시 연쇄가 너무 길은 경우 
        - 너무 많은 주석                    

2. 리팩토링 (Refactoring)       
    1) 주로 가독성을 높이고 유지보수를 편하게 하기 위해 기능이나
       결과의 변경 없이 코드의 내부 구조를 재조정하는 것 
    2) 외부에서 보는 프로그램의 기능은 변하지 않고 
       프로그램의 내부 구조를 개선하는 것  
    3) 프로그램의 동작이 변하지 않음을 증명하기 위해 유닛테스트가 필요
    4) 테스트 -> 리팩토링 -> 테스트 ....
     

3. 기술 부채 (technical debt)       
    1) 우리의 결정이 계속해서 미래에 선택할 수 있는 옵셥을 줄이고, 
       어떻게 시간이 지날수록 점점 더 해결하기 어려운 문제가 되는지를 설명함 
    2) 아무리 신중하게 고려한다 하더라도 우리는 여전히 이자를 물게 됨
    3) 해결책
        - 개발자간의 규칙 (coding convension)   
        - 동료 리뷰 자주 수행 
        - 테스트 코드 작성 

4. 
                코드 오류                   코드 스멜 
    ==========================================================
    개념     프로그래밍상의 결함        프로그램 가독성이 나쁘고
                                      코드품질 저하시키는 요인

    프로그램     동작하지 못함               동작    
    동작여부                                                     

    원인        프로그래밍 기법상 결합      프로그래머 경험, 능력 

    제거방법       오류 수정                리팩토링 

5. 리팩토링 고려사항 
    1) 리팩토링 자체가 디버깅이나 기능추가 구현이 아니므로 
       완성되지 않은 코드 또는 버그가 많은 코드에는 적용 불가 
    2) 비즈니스에 대한 이해가 우선시 되어야 하며 
       refactoring 과정에서 실패 시 백업 및 복구대책 중요 

6. 리팩토링 방법
    1) 메서드나 클래스가 겹치는 경우 ==> 분리함 
    2) 메서드나 클래스의 기능이 너무 많고 긴 경우 ==> 메서드와 클래스를 따로 추출함 
    3) 변수, 메서드, 필드명, 패키지, 클래스명 등이 안맞는 경우
       ==> 적절한 이름은 프로그래밍에서 매우 중요하므로 이해하기 쉽게 변경함 
    4) public으로 선언한 된 것이 너무 많은 경우 
       ==> Design Pattern 기법 활용함     

7. 예-매직넘버를 상수로 변경하기 
    1) 매직넘버 사용시 문제점 
        - 의미를 알기 어려움 
        - 수정하기 어려움 

8. 예-분류 코드를 클래스로 만들기 
    1) 기본 타입 분류 코드를 객체의 종류를 특정 값으로 나타내기         
