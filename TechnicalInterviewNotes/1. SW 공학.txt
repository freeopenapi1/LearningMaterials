1. 소프트웨어 위기 (crisis)
    1) 1955년 
        - 하드웨어 비용 
    2) 1970년
        - SW 개발 비용 
    3) 1990년
        - 소프트웨어 유지보수 비용 

    4) 원인
        - SW 대규모화 
            - 프로그램의 복잡도 증가 
            - 개발비용 증대 
        - H/W 대비 가격 상승 
            - H/W 는 기술발전에 따른 가격 하락 
            - 인건비는 계속 상승 
        - 예산 예측의 어려움 
            - 프로젝트 요건 및 요구정의 어려움 
            - 요구 변경에 대한 대처의 어려움 
        - 유지 보수의 어려움 
            - 개발 적체 현상 발생 
            - 변경 사항 발생, 변경에 따른 운영 반영      

2. SW 공학의 목표
    1) Quality
        - 고품질 소프트웨어를
    2) Delivery
        - 계획된 개발기간을 넘기지 않고
    3) Cost 
        - 추가적인 예산의 요청 없이 
    4) 사용자가 원하는 기능을 유지보수가 용이한 좋은 소프트웨어를 개발하는 것  

3. SW 공학의 필수 요건 
    1) Process
        - 모델, 모형 
    2) Method
        - 방법론
    3) Product
        - 산출물 
            - 테이블 정의서, 요구사항 정의서, 스토리보드
    4) Tool
        - eclipse, Intellij, Jira...     

4. SDLC (Software Development Life Cycle)
    1) 소프트웨어를 개발 타탕성 검토로부터 개발, 유지보수, 폐기까지의 
       전 과정을 하나의 생명주기로 정의하고 단계별 공정을 체계화한 모델 
       
       - Waterfall Model 
       - Prototyping Model 
       - Iterative Model
       - Spiral Model 

5. SW 개발 방법론 
    1) SW 공학 원리를 SW 생명주기에 적용하여 작업절차, 방법, 산출물 등을
       체계적으로 정리한 표준 절차나 지침 
    2) 목적 
        - 개발 생산성 향상
        - 수행공정 가시화
        - SW crisis 해결 
    3) 역사 

                1970         1980    1990   1995     1999      now       

        기술    Main Frame    Client/Server     Internet      3 Tier   

        방법론  구조적방법론    정보공학방법론    객체지향방법론   Agile 방법론
                                                    CBD 방법론  SSPL 방법론

        SDLC                                                    

6. 전통적 SDLC 한계
    1) 사용자 참여가 미흡함
    2) 단계별 진행과 승인 프로세스에 의해 생명 주기 전체 진행이 늦어질 가능성 있음
    3) 발전적 개발이 필요한 계속 확장되는 시스템에 부적합 가능성 있음 
    4) 장점
        - 기술적 위험이 낮고, 유사 프로젝트 경험이 있는 경우 사용 
        - 요구사항이 명확한 모델 
        - Phase testing, 고정된 산출물 

