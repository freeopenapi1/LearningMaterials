1. 주요 질문
    1) 디자인 패턴은 무엇인지 설명해보세요.
    2) GoF의 디자인 패턴에 대해서 아는데로 설명해보세요.
    3) 어댑터 패턴에 대해서 간략히 설명해보세요. 
    4) 싱글턴 패턴에 대해서 설명해보세요.
    5) 템플릿 메서드 패턴에 대해서 설명해보세요. 
    6) 디자인 패턴과 아키텍처, 프레임워크는 무엇인지 비교해보세요. 

2. 디자인 패턴의 의미와 목적 
    1) 디자인 패턴 
        - 프로그래머들이 유용하다고 생각되는 객체들의 
          일반적인 상호 작용 방법들을 모은 목록
        - 이 목록으로 반복적으로 나타나는 문제를 해결해온 
          전문가들의 경험을 모아서 정리한 모음집       

    2) 목적 
        - 설계 가이드 
            - 재사용을 가능하게 하는 설계를 선택 
            - 재사용을 방해하는 설계를 배제    
        - 이해 용이성 
            - 전문가들의 설계 노하우를 다른 개발자가 이해하고 적용
              가능한 형태로 제공         
        - 안정성
            - 안정적인 소프트웨어를 개발하기 위한 기법 제공 
        - 유지보수성 
            - 프로그램의 확장성 및 재 사용성을 통하여 유지보수에 활용   

3. 디자인 패턴 4요소                                    
    1) 패턴 이름 (pattern name)
        - 한두 단어로 설계문제와 해법을 서술 
        - 설계의 의도를 표현 
        - 개발자들간의 의사소통이 원활해짐 
    2) 문제 (problem)
        - 언제 패턴을 사용하는가를 서술 
        - 해결할 문제와 그 배경을 서술 
    3) 해법 (solution)
        - 요소들과 그 요소들간의 관계, 책임, 협력관계를 서술 
    4) 결과 (consequence)
        - 디자인 패턴을 적용해서 얻은 결과와 장단점을 서술                     

4. GoF (Gang of Four) Design Pattern 
   Design Patterns : Elements of Reusable Object-Oriented Software (1994)
    1) 에리히 감마, 리차드 헬름, 랄프 존슨, 존 블리시디스
    2) 23가지의 디자인 패턴을 정리하고 
       각각의 디자인 패턴을 생성(Creational), 구조(Structural), 행위(Behavioral)
       3가지로 분류함.
    3) 프로그래머들이 유용하다고 생각되는 객체들의 일반적인 상호 작용 방법들을
       모은 목록으로
       반복적으로 나타나는 문제를 해결해온 전문가들의 경험을 모아서 정리한 모음집.   

5. 디자인 패턴의 기본 원칙
    1) 캡슐화 
    2) 위임 (상속보다는 위임을 활용)
    3) 인터페이스 
        - 구현이 아닌 인터페이스에 맞춰서 프로그래밍 
    4) Loosely Coupling
        - 가능하면 느슨하게 결합하는 디자인 사용 
    5) 개방 & 패쇄 
        - 클래스 확장에 대해서는 Open, 변경에 대해서는 Close 
    6) 의존관계
        - 추상화된 클래스에 의존하고 구현 클래스 의존은 배제                         