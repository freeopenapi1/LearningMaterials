1. Agile 등장 배경
    1) S/W 개발 환경의 변화 
        - 정보시스템에 대한 사용자 요구 사항 다양
        - 정보시스템 수명주기 단축
        - 정보시스템의 적시성(time to market)과 Product의 적시 배포(Release) 중요

    2) 기존 개발 방법론의 한계
        - 문서 위주, 절차중심의 방법론으로는 빠른 변화 대응과 효율적인
          시스템 개발이 어려움 
        - 위험(Risk) 조기 발견의 어려움        

2. 일정 지연의 원인 
    1) 학생증후군
        - 시험이 코앞에 다가와야 열심히 공부함.   
    2) 파킨슨 법칙
        - 모든 작업은 주어진 기간을 모두 사용
        - 빨리 끝낼 수 있는 일도 먼저 완료하지 않음  
    3) 자기방어
        - 작업을 일찍 완료하면 다른 작업을 추가 시키기 때문에
          작업 완료를 숨김 

3. 닭이 많을 때 현상 
    1) 납기 지연에 대한 책임을 지는 사람은 없고, 개발자들은 비난을 들음
    2) 대충 구축된 시스템은 '애물단지'로 전략함 
    3) 실제 코딩(삽질?)을 해야 할 개발자는 배제된 상태로 회의 진행 

4. Agile
    1) 신속하고 변화에 유연하며 적응적인 (adaptive) 소프트웨어 개발을 
       목표로 하는 다양한 경량 개발 방법론 전체를 일컫는 총칭.
    2) 반복(iteration)이라 불리는 단기 단위를 채용함으로 
       위험을 최소화하는 개발방법론(Process)
    3) 종류
        - XP 
        - SCRUM 
        - TDD
        - kanban 
        - LEAN           

5. SCRUM     
    1) 선수들이 허들(Huddle)을 형성하고, 협력하고, 공을 한번에 
       몇 걸음씩 상대팀 진영을 이동하는 형태(형상)을 지칭하는 의미. 럭비에서 유래함
    
    2) Product backlog를 바탕으로 기술적으로 분할되고 재해석된
       스프린트(Sprint)를 스크럼 팀(team)을 통해 구현해 나가는 Agile 방법론 

    3) 구성 요소 
        - Product Backlog
            - 해결해야 하거나 포함되어야 할 기능, 기술에 대한 모든 기술 나열 
            - 요구되는 제품의 요구사항의 우선순위 나열 
            - 프로젝트가 진행되면서 진화되고 변경 
        - Sprint Backlog 
            - 해당 Sprint 기간에 수행되어야 하는 Task 목록
            - Spring 기간 동안 개발 가능한 기능의 목록
            - Product Backlog에서 선택 
        - Sprint 
            - 통상 4~6주(30일) 정도의 성격을 가진 잘 정의된 반복 개발 주기 
            - 각 Sprint 단계 종료시 새로운 기능이 추가되어 
              실행 가능 제품이 인도되어야 함 
        - Daily Scrum 
            - 매일 약 15분 정도의 짧은 회의 
            - Scrum Master는 진척 사항 검토, 정상적 종료를 방해하는 위험 및 
              작업 계획을 확인 
        - Product Owner
            - 고객, 관리자, 팀원들과의 협의를 통하여 목표 설정 
            - 요구 사항 정의, Product Backlog 업데이트 
            - Product Backlog 내 item의 우선순위 정의 
            - 요구사항이 적절하게 구현되었는지 검토 및 확인 
        - Scrum Master 
            - 프로젝트 관리자로서 팀원을 코칭, 프로젝트의 문제 상황을 해결 
            - 팀원들을 대표하는 수평적 리더 역할 
        - Team (팀원)
            - Product Backlog에 따라 Sprint 기간 내 구현/개발 
            - 책임감 있는 프로젝트 개발 실무자                                                                            

6. Daily Meeting
    1) 매일 정해진 시각에 팀원들이 업무를 15분 이내 공유하는 미팅
    2) Standing 원칙 / 상호 비방 금지
    3) 3가지 언급
        - 어제 스크럼 이후 한일
        - 내일 스크럼까지 할 일
        - 장애요소 및 개인사정 
    4) 상황 보고가 아닌 서로 공유하는 커피 타임 
    5) 개인 질문 or 시간이 걸릴 논쟁이나 이슈 회의는 따로 회의를 잡아서 진행  

7. 작업 현황판 
    1) 프로젝트 룸에 게시함 
    2) Daily Scrum 때마다 진척 공유 (kanban Board)      
    3) 가시화 -> 동기 부여 

8. 번 다운 차트 (Burndown chart)
    1) 기울기 
        - 작업 속도 

9. Review Sprint
    1) 고객, 사용자, Product Owner에게 스크럼 팀이 개발한 
       이번 Sprint 완성된 제품 기능에 대해서 데모 시연 및 feedback
    2) 주의점
        - 고객 의사결정권자 참석, 시연 제품의 완성도 떨어질 경우
          고객의 신뢰는 바닥으로 실추 가능    